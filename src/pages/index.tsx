import { ApolloError } from '@apollo/client';
import type { NextPage } from 'next';
import Head from 'next/head';
import ActivityList from '../components/ActivityList';
import client from '../apollo-client';
import { ACTIVITIES } from '../queries/activities.query';

interface ApolloServerDataProps {
  data: any;
  error?: ApolloError;
}

// ApolloServerDataPage<autogenerated query response type> extends NextPage but adds the props data and error,
// which in turn are defined by the given generic type arg
const Home: ApolloServerDataPage<ActivitiesQuery> = ({ data, error }) => (
  <div>
    <Head>
      <title>Activities App</title>
      <meta name="description" content="Find activities near you" />
      <link rel="icon" href="/favicon.ico" />
    </Head>

    <main>
      <ActivityList activities={data.activities} />
    </main>
  </div>
);

// HOC takes NextPage component and adds getServerSideProps() with the given GQL query
// how to define getServerSideProps() within the HOC is a challenge
export default withApolloServerData(Home, ACTIVITIES);

export async function getServerSideProps() {
  const { data, error } = await client.query({
    query: ACTIVITIES,
  });

  return {
    props: {
      activities: data.activities,
      error,
    },
  };
}
